from turtle import width
import numpy as np
from torch.nn import functional as F
import torch
from torch import nn
from . import utils
from config import Config
from torchvision.ops import boxes

class RegionProposalNetwork(nn.Module):
    '''
    A Region Proposal Network (RPN) takes image (of any size) as input and outputs a
    set of rectangular object proposals (RPN locs) and objectness score (foreground or background).

    Parameters:
    ----
    :parameter:`in_channels`:   int
        channel size of feature map input
    :parameter:`mid_channels`:  int 
        channel size of immediate tensor output

    '''
    def __init__(self, in_channels=512, mid_channels=512, config: Config=None):
        super().__init__()
        if not config:
            raise Exception('No config parameter found')
        self.CONFIG = config   
        self.n_anchors = len(self.CONFIG.anchor_scales) * len(self.CONFIG.ratios)
    
        # intermediate layer extracting features from the feature map for proposal 
        # generation
        self.conv1 =  nn.Conv2d(in_channels=in_channels, out_channels=mid_channels,
                                     kernel_size=3, stride=1, padding=1)

        # predicts box location
        self.reg =         nn.Conv2d(in_channels=mid_channels, out_channels=self.n_anchors*4,
                                      kernel_size=1, stride=1, padding=0)

        # every position on the feature map has 9 anchors, each has two possible labels (foreground, background)
        # we set the depth as 9*2 - every anchor will have a vector of 2 values (logit)
        # labels can be predicted if logit is fed into a softmax/logistic regression activation function
        self.cls =        nn.Conv2d(in_channels=mid_channels, out_channels=self.n_anchors*2,
                                      kernel_size=1, stride=1, padding=0)

        # initialize weights
        self.conv1.weight.data.normal_(0,0.1)
        self.conv1.bias.data.zero_()

        self.reg.weight.data.normal_(0,0.1)
        self.reg.bias.data.zero_()

        self.cls.weight.data.normal_(0,0.1)
        self.cls.bias.data.zero_()

    def forward(self,feat_map,gt_boxes=None):
        '''
        Region proposals are generated by sliding a small network over the feature map whose input
        is an `3x3` spatial window of the input feature map. Then feature is fed into two sibling
        convolutional layer `(1 x 1)`- box-regression layer and box-classification layer. 

        Parameters:
        ---
        :parameter:`x`:          ~torch.Tensor :math:`[N,in_channels,H,W]`
            feature map extracted  from the input image
        '''
        batch_size, _,height,width = feat_map.shape

        feat_map = F.relu(self.conv1(feat_map))   # [N,out_channels,H,W]     

        box_reg = self.reg(feat_map)       # anchor location predictions    [N,A*4,H,W]
        box_reg = box_reg.permute(0,2,3,1).contiguous().view(batch_size, -1, 4)   # reshape to same shape as anchor [N,W*H*A,4]       

        obj_score = self.cls(feat_map)     # objectness score      [N,A*2,H,W]
        obj_fg_score = F.softmax(obj_score.view(batch_size, height,width,self.n_anchors,2),dim=4)
        obj_fg_score = obj_fg_score[:,:,:,:,1].contiguous().view(batch_size,-1)

        obj_score = obj_score.permute(0,2,3,1).contiguous().view(batch_size, -1,2) #[N,H,W,A*2] -> [N, W*H*A, 2]

        anchors = utils.generateAnchors(self.CONFIG.ratios,
                                        self.CONFIG.anchor_scales,
                                        self.CONFIG.feat_stride,
                                        height=height,
                                        width=width)
        anchors = torch.from_numpy(anchors)
        anchors = anchors.view(1, anchors.size(0), 4).expand(batch_size, anchors.size(0), 4)

        roi_box = utils.locToBox(anchors,box_reg)
        print(f'rpn_box size: {roi_box.shape}')
        
        # clip boxes so it stays within the image
        roi_box[:,:,0::2] = torch.clip(roi_box[:,:,0::2],min=0, max=self.CONFIG.input_h)
        roi_box[:,:,1::2] = torch.clip(roi_box[:,:,1::2],min=0, max=self.CONFIG.input_w)

        # keep only boxes with sides 16 or larger
        roi_h = roi_box[:,:,2] - roi_box[:,:,0]
        roi_w = roi_box[:,:,3] - roi_box[:,:,1]

        keep = torch.where((roi_h>=self.CONFIG.anchor_base) & (roi_w>=self.CONFIG.anchor_base))
        roi_splitted = utils.split(roi_box,keep)        # tuple of batch_size num of tensors
        score_splitted = utils.split(obj_fg_score, keep)   # tuple of tensors

        print(f'rpn_box size AFTER: {[i.shape for i in roi_splitted]}')
        print(f'obj_sco size AFTER: {[i.shape for i in score_splitted]}')
        # print(score_splitted[0][:5])
        # stack after we give the sorting + nms 
        # print(score_splitted[1][-2:])
        rpn_roi = list()
        rpn_scores = list()

        for b in range(batch_size):
            roi = roi_splitted[b]
            sco = score_splitted[b]
            # sorts the indices by the score
            order = sco.ravel().argsort(descending=True)
            # keep only top terms
            order = order[:self.CONFIG.pre_nms]
            sco = sco[order]
            roi = roi[order,:]

            # NMS KEEP ONLY POSTNMS
            roi_copy = roi.clone()
            roi_copy[:,0::4]=roi[:,1::4]
            roi_copy[:,1::4]=roi[:,0::4]
            roi_copy[:,2::4]=roi[:,3::4]
            roi_copy[:,3::4]=roi[:,2::4]

            keep = boxes.nms(roi_copy, sco,self.CONFIG.nms_threshold)[:self.CONFIG.pos_nms]
            # print(keep)
            sco = sco[keep]
            roi = roi[keep]

            rpn_roi.append(roi)
            rpn_scores.append(sco)

        rpn_scores = torch.stack(rpn_scores)
        rpn_roi = torch.stack(rpn_roi)

        print(rpn_scores.shape, rpn_roi.shape,gt_boxes.shape)

        # find iou between ground truth bbox and generateod rois 
        #       

            
        

        return box_reg, obj_score

    def generateProposals(self,x):
        '''
        '''
        batch_size,_,height,width = x.shape
        # generate anchors on the images
        
        # turn the outp
                

        pass

    def assignLabels(self, rois, gt_boxes):
        
        
        pass